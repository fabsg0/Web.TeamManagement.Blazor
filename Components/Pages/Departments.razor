@page "/Departments"
@using fabsg0.Web.TeamManagement.Blazor.Components.DepartmentPopups
@using fabsg0.Web.TeamManagement.Blazor.Entities
@using fabsg0.Web.TeamManagement.Blazor.Providers
@inject DepartmentProvider DepartmentProvider
@inject ILogger<Departments> Logger
@rendermode InteractiveServer

<PageTitle>Departments - TeamManagement</PageTitle>

<div class="container py-5">
    <div class="d-flex flex-wrap justify-content-between align-items-center mb-4 gap-3">
        <h2 class="mb-0 fw-bold text-primary">üè¢ Departments</h2>
        <button class="btn btn-success shadow-sm" @onclick="@(() => _showCreateDepartmentPopup = true)">
            ‚ûï Add Department
        </button>
    </div>

    @if (_isLoading)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="card border-0 shadow-sm rounded-4">
            <div class="card-body p-0">
                <table class="table table-hover align-middle mb-0">
                    <thead class="table-light text-uppercase small text-muted">
                    <tr>
                        <th>#</th>
                        <th>Name</th>
                        <th class="text-end">Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var department in _departments)
                    {
                        <tr>
                            <td>@department.Id</td>
                            <td>
                                <span class="badge bg-@department.Color">@department.Name</span>
                            </td>
                            <td class="text-end">
                                <div class="btn-group btn-group-sm">
                                    <button class="btn btn-outline-primary" title="Edit"
                                            @onclick="@(() =>
                                                      {
                                                          _selectedDepartment = department;
                                                          _showUpdateDepartmentPopup = true;
                                                      })">
                                        üñäÔ∏è
                                    </button>
                                    <button class="btn btn-outline-danger" title="Delete"
                                            @onclick="@(() =>
                                                      {
                                                          _selectedDepartment = department;
                                                          _showDeleteDepartmentPopup = true;
                                                      })">
                                        üóëÔ∏è
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    }

    @if (_showCreateDepartmentPopup)
    {
        <CreateDepartmentPopup OnClose="async () =>
        {
            _showCreateDepartmentPopup = false;
            await FetchData();
        }"/>
    }

    @if (_showUpdateDepartmentPopup)
    {
        <UpdateDepartmentPopup Department="_selectedDepartment" OnClose="async () =>
        {
            _showUpdateDepartmentPopup = false;
            await FetchData();
        }"/>
    }

    @if (_showDeleteDepartmentPopup)
    {
        <DeleteDepartmentPopup DepartmentId="_selectedDepartment.Id" OnClose="async () =>
        {
            _showDeleteDepartmentPopup = false;
            await FetchData();
        }"/>
    }
</div>

@code {
    private List<Department> _departments = [];
    private bool _isLoading;
    private Department _selectedDepartment = new();

    private bool _showCreateDepartmentPopup;
    private bool _showUpdateDepartmentPopup;
    private bool _showDeleteDepartmentPopup;

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    private async Task FetchData()
    {
        _isLoading = true;
        try
        {
            _departments = await DepartmentProvider.GetDepartments();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to fetch departments.");
        }
        finally
        {
            _isLoading = false;
        }
    }

}
