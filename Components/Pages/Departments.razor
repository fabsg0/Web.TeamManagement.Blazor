@page "/Departments"
@using fabsg0.Web.TeamManagement.Blazor.Components.DepartmentPopups
@using fabsg0.Web.TeamManagement.Blazor.Entities
@using fabsg0.Web.TeamManagement.Blazor.Providers
@inject DepartmentProvider DepartmentProvider
@inject ILogger<Departments> Logger
@rendermode InteractiveServer

<PageTitle>Departments - TeamManagement</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="px-4 py-6">
    <div class="d-flex flex-wrap justify-content-between align-items-center mb-4 gap-3">
        <h2 class="mb-0 fw-bold text-primary">üè¢ Departments</h2>
        <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="@(() => _showCreateDepartmentPopup = true)">
            ‚ûï Add Department
        </MudButton>
    </div>

    @if (_isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="mx-auto my-10" />
    }
    else
    {
        <MudDataGrid T="Department"
                     Items="_departments"
                     Class="border rounded shadow-sm"
                     Hover="true"
                     Filterable="true"
                     Breakpoint="Breakpoint.Sm">
            <Columns>
                <PropertyColumn Property="x => x.Id" Title="#" />
                <TemplateColumn Title="Name">
                    <CellTemplate>
                        <span
                             Class="badge bg-@context.Item.Color me-1">@context.Item.Name</span>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="Actions" Align="Align.Right">
                    <CellTemplate>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small"
                                       OnClick="@(() =>
                                                {
                                                    _selectedDepartment = context.Item;
                                                    _showUpdateDepartmentPopup = true;
                                                })" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                                       OnClick="@(() =>
                                                {
                                                    _selectedDepartment = context.Item;
                                                    _showDeleteDepartmentPopup = true;
                                                })" />
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="Department" />
            </PagerContent>
        </MudDataGrid>
    }

    @if (_showCreateDepartmentPopup)
    {
        <CreateDepartmentPopup OnClose="async () =>
        {
            _showCreateDepartmentPopup = false;
            await FetchData();
        }" />
    }

    @if (_showUpdateDepartmentPopup)
    {
        <UpdateDepartmentPopup Department="_selectedDepartment" OnClose="async () =>
        {
            _showUpdateDepartmentPopup = false;
            await FetchData();
        }" />
    }

    @if (_showDeleteDepartmentPopup)
    {
        <DeleteDepartmentPopup DepartmentId="_selectedDepartment.Id" OnClose="async () =>
        {
            _showDeleteDepartmentPopup = false;
            await FetchData();
        }" />
    }
</MudContainer>

@code {
    private List<Department> _departments = [];
    private bool _isLoading;
    private Department _selectedDepartment = new();

    private bool _showCreateDepartmentPopup;
    private bool _showUpdateDepartmentPopup;
    private bool _showDeleteDepartmentPopup;

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    private async Task FetchData()
    {
        _isLoading = true;
        try
        {
            _departments = await DepartmentProvider.GetDepartments();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to fetch departments.");
        }
        finally
        {
            _isLoading = false;
        }
    }
}
