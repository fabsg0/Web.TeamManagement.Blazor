@page "/"
@using fabsg0.Web.TeamManagement.Blazor.Components.MemberPopups
@using fabsg0.Web.TeamManagement.Blazor.Components.MembershipPopups
@using fabsg0.Web.TeamManagement.Blazor.Models
@using fabsg0.Web.TeamManagement.Blazor.Providers
@using Microsoft.AspNetCore.WebUtilities
@inject MemberProvider MemberProvider
@inject MembershipProvider MembershipProvider
@inject ILogger<Home> Logger
@inject NavigationManager NavigationManager
@inject IJSRuntime Js
@rendermode InteractiveServer

<PageTitle>Home - TeamManagement</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="px-4 py-6">
    <div class="d-flex flex-wrap justify-content-between align-items-center mb-4 gap-3">
        <div class="d-flex align-items-center gap-3">
            <h2 class="mb-0 fw-bold text-primary">👥 Members</h2>
            <MudSelect T="int" Value="_year" Dense Label="Year" Class="w-20" Immediate="true"
                       ValueChanged="OnYearChanged">
                @foreach (var year in _availableYears)
                {
                    <MudSelectItem Value="year">@year</MudSelectItem>
                }
            </MudSelect>
            
            <MudButton OnClick="ExportExcel" StartIcon="@Icons.Material.Filled.Download">
                Export to Excel
            </MudButton>
        </div>

        <div class="d-flex gap-2">
            <MudButton Variant="Variant.Outlined" OnClick="@(() => _showCreateYearMembershipPopup = true)">
                ➕ Create Year-Membership
            </MudButton>
            <MudButton Color="Color.Success" OnClick="@(() => _showCreateMemberPopup = true)">
                ➕ Add Member
            </MudButton>
            @* <MudButton Color="Color.Primary" OnClick="@(() => _showImportPopup = true)"> *@
            @*     ➕ Import Members *@
            @* </MudButton> *@
        </div>
    </div>

    @if (_isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="mx-auto my-10"/>
    }
    else if (_isInitialized)
    {
        <MudDataGrid T="MemberModel"
                     Items="@_members"
                     MultiSelection="true"
                     CurrentPage="_currentPage"
                     CurrentPageChanged="OnPageChanged"
                     SortMode="SortMode.Multiple"
                     Filterable="true"
                     QuickFilter="@_quickFilter"
                     Class="border rounded shadow-sm">
            <ToolBarContent>
                <MudSpacer/>
                <MudTextField @bind-Text="_searchString" 
                              Placeholder="Search" 
                              Adornment="Adornment.Start"
                              Immediate="true" 
                              AdornmentIcon="@Icons.Material.Filled.Search" 
                              IconSize="Size.Medium"
                              Class="mt-0"/>
            </ToolBarContent>

            <Columns>
                <SelectColumn T="MemberModel"/>
                <PropertyColumn Property="x => x.Id" Title="#"/>
                <PropertyColumn Property="x => x.FirstName" Title="First Name"/>
                <PropertyColumn Property="x => x.LastName" Title="Last Name"/>
                <TemplateColumn T="MemberModel" SortBy="x => x.PrimaryDepartmentName" Title="Departments" Sortable="true" Filterable="true">
                    <CellTemplate>
                        @{
                            var member = context.Item;
                        }

                        @if (member.DepartmentMemberships != null)
                        {
                            foreach (var department in member.DepartmentMemberships)
                            {
                                if (department.Department == null) continue;
                                <span
                                    Class="badge bg-@department.Department.Color me-1">@department.Department.Name</span>
                            }
                        }
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn T="MemberModel" Title="Membership">
                    <CellTemplate>
                        @{
                            var member = context.Item;
                        }

                        @if (member.CurrentMembershipFee is not null)
                        {
                            <MudButton Size="Size.Small"
                                       Color="@(member.CurrentMembershipFee.IsPaid ? Color.Success : Color.Error)"
                                       OnClick="@(() => ChangePaymentStatus(member.Id))"
                                       Class="me-2">
                                @(member.CurrentMembershipFee.IsPaid ? "Paid" : "Not Paid")
                            </MudButton>
                        }
                        else
                        {
                            <MudChip Color="Color.Default" Variant="Variant.Outlined" Class="me-2">Unknown</MudChip>
                        }
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.BirthDate" Title="Birthdate" Format="dd.MM.yyyy"/>
                <TemplateColumn T="MemberModel" Title="Actions" Align="Align.Right">
                    <CellTemplate>
                        @{
                            var member = context.Item;
                        }

                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       Color="Color.Primary"
                                       Size="Size.Small"
                                       OnClick="@(() =>
                                                {
                                                    _selectedMember = member;
                                                    _showUpdateMemberPopup = true;
                                                })"/>

                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       Color="Color.Error"
                                       Size="Size.Small"
                                       OnClick="@(() =>
                                                {
                                                    _selectedMember = member;
                                                    _showDeleteMemberPopup = true;
                                                })"/>
                    </CellTemplate>
                </TemplateColumn>

            </Columns>

            <PagerContent>
                <MudDataGridPager T="MemberModel"/>
            </PagerContent>
        </MudDataGrid>
    }
</MudContainer>

@if (_showCreateMemberPopup)
{
    <CreateMemberPopup OnClose="async () => { _showCreateMemberPopup = false; await FetchData(); }"/>
}
@if (_showUpdateMemberPopup)
{
    <UpdateMemberPopup Member="_selectedMember"
                       OnClose="async () => { _showUpdateMemberPopup = false; await FetchData(); }"/>
}
@if (_showDeleteMemberPopup)
{
    <DeleteMemberPopup MemberId="_selectedMember.Id"
                       OnClose="async () => { _showDeleteMemberPopup = false; await FetchData(); }"/>
}
@if (_showCreateYearMembershipPopup)
{
    <CreateYearMembershipPopup OnClose="async () => { _showCreateYearMembershipPopup = false; await FetchData(); }"/>
}
@if (_showImportPopup)
{
    <MemberImportPopup OnClose="async () => { _showImportPopup = false; await FetchData(); }"/>
}

@code {
    private List<MemberModel> _members = [];
    private bool _isLoading;
    private bool _isInitialized = false;
    private bool _showCreateMemberPopup;
    private bool _showUpdateMemberPopup;
    private bool _showDeleteMemberPopup;
    private bool _showImportPopup;
    private bool _showCreateYearMembershipPopup;
    private MemberModel _selectedMember = new();

    private Guid? _selectedDepartmentId;

    private string _searchString;
    private int _currentPage = 0;
    private int _year = DateTime.UtcNow.Year;
    private List<int> _availableYears = [];

    private Func<MemberModel, bool> _quickFilter => x =>
    {
        var matchesSearch = string.IsNullOrWhiteSpace(_searchString) ||
                            x.FirstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                            x.LastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                            (!string.IsNullOrWhiteSpace(x.Street) && x.Street.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
                            (x.ZipCode != null && x.ZipCode.ToString()!.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
                            x.BirthDate.ToString("dd.MM.yyyy").Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                            (x.DepartmentMemberships != null && x.DepartmentMemberships.Any(dm =>
                                dm.Department != null &&
                                dm.Department.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase)));

        var matchesDepartment = !_selectedDepartmentId.HasValue ||
                                (x.DepartmentMemberships?.Any(dm => dm.Department?.Id == _selectedDepartmentId.Value) ?? false);

        return matchesSearch && matchesDepartment;
    };


    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParameters = QueryHelpers.ParseQuery(uri.Query);

        if (queryParameters.TryGetValue("year", out var yearParam) && int.TryParse(yearParam, out var parsedYear))
        {
            _year = parsedYear;
        }
        else
        {
            _year = DateTime.UtcNow.Year;
        }

        if (queryParameters.TryGetValue("page", out var pageParam) && int.TryParse(pageParam, out var parsedPage))
        {
            _currentPage = parsedPage;
        }

        await FetchData();
        _isInitialized = true;
    }

    private async Task FetchData()
    {
        _isLoading = true;
        try
        {
            _members = await MemberProvider.GetMembers(_year);
            _availableYears = await MembershipProvider.GetMembershipYears();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to fetch data.");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void ExportExcel()
    {
        var url = NavigationManager.BaseUri + "api/exportMembers";
        Js.InvokeVoidAsync("open", url, "_blank");
    }

    private async Task OnYearChanged(int newYear)
    {
        _year = newYear;
        UpdateQueryParameters();
        await FetchData();
    }

    private void OnPageChanged(int newPage)
    {
        _currentPage = newPage;
        UpdateQueryParameters();
    }

    private void UpdateQueryParameters()
    {
        var uri = new Uri(NavigationManager.Uri);
        var baseUri = uri.GetLeftPart(UriPartial.Path);

        var query = new Dictionary<string, string>
        {
            ["year"] = _year.ToString(),
            ["page"] = _currentPage.ToString()
        };

        var newUri = QueryHelpers.AddQueryString(baseUri, query!);
        NavigationManager.NavigateTo(newUri, forceLoad: false);
    }

    private async Task ChangePaymentStatus(Guid memberId)
    {
        try
        {
            await MembershipProvider.ChangePaymentStatusForYear(memberId, _year);
            await FetchData();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to change payment status.");
        }
    }

}
