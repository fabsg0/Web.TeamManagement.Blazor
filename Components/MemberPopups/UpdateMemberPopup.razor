@using fabsg0.Web.TeamManagement.Blazor.Components.CustomComponents
@using fabsg0.Web.TeamManagement.Blazor.Entities
@using fabsg0.Web.TeamManagement.Blazor.Models
@using fabsg0.Web.TeamManagement.Blazor.Providers
@inject MemberProvider MemberProvider
@inject DepartmentProvider DepartmentProvider
@inject ILogger<UpdateMemberPopup> Logger

<Popup OnClose="OnClose" Title="Update Member">
    <EditForm Model="@Member" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <!-- Tabs -->
        <ul class="nav nav-tabs mb-3">
            <li class="nav-item">
                <button type="button" class="nav-link @(activeTab == "personal" ? "active" : "")"
                        @onclick="@(() => SetTab("personal"))">Personal Info
                </button>
            </li>
            <li class="nav-item">
                <button type="button" class="nav-link @(activeTab == "address" ? "active" : "")"
                        @onclick="@(() => SetTab("address"))">Address
                </button>
            </li>
            <li class="nav-item">
                <button type="button" class="nav-link @(activeTab == "departments" ? "active" : "")"
                        @onclick="@(() => SetTab("departments"))">Departments
                </button>
            </li>
        </ul>

        <!-- Tab content -->
        <div class="tab-content">
            @if (activeTab == "personal")
            {
                <div class="tab-pane fade show active">
                    <div class="mb-3">
                        <label for="firstName" class="form-label">First Name</label>
                        <InputText id="firstName" class="form-control" @bind-Value="Member.FirstName"/>
                        <ValidationMessage For="@(() => Member.FirstName)"/>
                    </div>

                    <div class="mb-3">
                        <label for="lastName" class="form-label">Last Name</label>
                        <InputText id="lastName" class="form-control" @bind-Value="Member.LastName"/>
                        <ValidationMessage For="@(() => Member.LastName)"/>
                    </div>

                    <div class="mb-3">
                        <label for="sex" class="form-label">Sex</label>
                        <InputSelect id="sex" class="form-select text-capitalize" @bind-Value="Member.Sex">
                            <option disabled value="">-- Select sex --</option>
                            @foreach (var sex in _selectableSex)
                            {
                                <option value="@sex">@sex</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => Member.Sex)"/>
                    </div>

                    <div class="mb-3">
                        <label for="birthdate" class="form-label">Birthdate</label>
                        <InputDate id="birthdate" class="form-control" @bind-Value="Member.BirthDate"/>
                        <ValidationMessage For="@(() => Member.BirthDate)"/>
                    </div>

                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" class="form-control" @bind-Value="Member.Email"/>
                    </div>

                    <div class="mb-3">
                        <label for="telephone" class="form-label">Telephone</label>
                        <InputText id="telephone" class="form-control" @bind-Value="Member.Telephone"/>
                    </div>
                </div>
            }
            else if (activeTab == "address")
            {
                <div class="tab-pane fade show active">
                    <div class="mb-3">
                        <label for="street" class="form-label">Street</label>
                        <InputText id="street" class="form-control" @bind-Value="Member.Street"/>
                    </div>

                    <div class="mb-3">
                        <label for="houseNumber" class="form-label">House Number</label>
                        <InputText id="houseNumber" class="form-control" @bind-Value="Member.HouseNumber"/>
                    </div>

                    <div class="mb-3">
                        <label for="zipCode" class="form-label">Zip Code</label>
                        <InputNumber id="zipCode" class="form-control" @bind-Value="Member.ZipCode"/>
                    </div>

                    <div class="mb-3">
                        <label for="city" class="form-label">City</label>
                        <InputText id="city" class="form-control" @bind-Value="Member.City"/>
                    </div>
                </div>
            }
            else if (activeTab == "departments")
            {
                <div class="tab-pane fade show active">
                    <label class="form-label mb-2">Departments</label>
                    <table class="table table-sm">
                        <thead>
                        <tr>
                            <th></th>
                            <th>Name</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var dept in _departments)
                        {
                            <tr>
                                <td>
                                    <input type="checkbox"
                                           checked="@_selectedDepartmentIds.Contains(dept.Id)"
                                           @onchange="e => ToggleDepartment(dept.Id, e.Value)"/>
                                </td>
                                <td>@dept.Name</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            }
        </div>

        <!-- Buttons -->
        <div class="mt-3 d-flex justify-content-end gap-2">
            <button type="submit" class="btn btn-success">Save</button>
            <button type="button" class="btn btn-danger" @onclick="OnClose">Cancel</button>
        </div>
    </EditForm>
</Popup>

@code {
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public required MemberModel Member { get; set; }

    private List<Department> _departments = [];
    private List<Guid> _selectedDepartmentIds = [];
    private readonly List<string> _selectableSex = ["man", "woman"];
    private string activeTab = "personal";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _departments = await DepartmentProvider.GetDepartments();
            _selectedDepartmentIds = await DepartmentProvider.GetDepartmentIdsForMember(Member.Id);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load departments.");
        }
    }

    private void SetTab(string tabKey)
    {
        activeTab = tabKey;
    }

    private void ToggleDepartment(Guid departmentId, object? isChecked)
    {
        var isSelected = isChecked is bool value && value;

        if (isSelected)
        {
            if (!_selectedDepartmentIds.Contains(departmentId))
                _selectedDepartmentIds.Add(departmentId);
        }
        else
        {
            _selectedDepartmentIds.Remove(departmentId);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await MemberProvider.UpdateMember(Member);
            await DepartmentProvider.SetDepartmentMemberships(Member.Id, _selectedDepartmentIds);
            await OnClose.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to update member and departments.");
        }
    }

}
