@using fabsg0.Web.TeamManagement.Blazor.Components.CustomComponents
@using fabsg0.Web.TeamManagement.Blazor.Models
@using fabsg0.Web.TeamManagement.Blazor.Providers
@inject MemberProvider MemberProvider
@inject ILogger<UpdateMemberPopup> Logger

<Popup OnClose="OnClose" Title="Update member">
    <EditForm Model="@Member" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="firstName" class="form-label">First Name</label>
            <InputText id="firstName" class="form-control" @bind-Value="Member.FirstName" />
            <ValidationMessage For="@(() => Member.FirstName)" />
        </div>

        <div class="mb-3">
            <label for="lastName" class="form-label">Last Name</label>
            <InputText id="lastName" class="form-control" @bind-Value="Member.LastName" />
            <ValidationMessage For="@(() => Member.LastName)" />
        </div>

        <div class="mb-3">
            <label for="birthdate" class="form-label">Birthdate</label>
            <InputDate id="birthdate" class="form-control" @bind-Value="Member.BirthDate" />
            <ValidationMessage For="@(() => Member.BirthDate)" />
        </div>

        <div class="mb-3">
            <label for="street" class="form-label">Street</label>
            <InputText id="street" class="form-control" @bind-Value="Member.Street" />
        </div>

        <div class="mb-3">
            <label for="houseNumber" class="form-label">House Number</label>
            <InputText id="houseNumber" class="form-control" @bind-Value="Member.HouseNumber" />
        </div>

        <div class="mb-3">
            <label for="zipCode" class="form-label">Zip Code</label>
            <InputNumber id="zipCode" class="form-control" @bind-Value="Member.ZipCode" />
        </div>

        <div class="mb-3">
            <label for="city" class="form-label">City</label>
            <InputText id="city" class="form-control" @bind-Value="Member.City" />
        </div>

        <button type="submit" class="btn btn-success">Save</button>
        <button type="button" class="btn btn-danger" @onclick="OnClose">Cancel</button>
    </EditForm>
</Popup>

@code {

    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public required MemberModel Member { get; set; }

    private async Task HandleValidSubmit()
    {
        try
        {
            await MemberProvider.UpdateMember(Member);
            await OnClose.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to update member.");
        }
    }

}